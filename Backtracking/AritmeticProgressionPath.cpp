//–î–∞–¥–µ–Ω–∞ –µ –º—Ä–µ–∂–∞ Gr –æ—Ç ùëö √ó ùëõ(ùëö, ùëõ ‚àà[2; 20]) –∫–≤–∞–¥—Ä–∞—Ç—á–µ—Ç–∞.
//–í—ä–≤ –≤—Å—è–∫–æ –∫–≤–∞–¥—Ä–∞—Ç—á–µ –Ω–∞ –º—Ä–µ–∂–∞—Ç–∞ –µ –∑–∞–ø–∏—Å–∞–Ω–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–æ —á–∏—Å–ª–æ.
//–î–∞–¥–µ–Ω–∏ —Å–∞ —Å—ä—â–æ –¥–≤–µ –ø—Ä–æ–∏–∑–≤–æ–ª–Ω–∏ –∫–≤–∞–¥—Ä–∞—Ç—á–µ—Ç–∞ k1 –∏ k2 –≤ –º—Ä–µ–∂–∞—Ç–∞.
//–ê—Ü–∏–∫–ª–∏—á–µ–Ω –ø—ä—Ç –º–µ–∂–¥—É –¥–≤–µ –∫–≤–∞–¥—Ä–∞—Ç—á–µ—Ç–∞ –µ –≤—Å—è–∫–∞ —Ä–µ–¥–∏—Ü–∞ –æ—Ç —Ä–∞–∑–ª–∏—á–Ω–∏ —Å—ä—Å–µ–¥–Ω–∏ –≤—ä–≤ –≤–µ—Ä—Ç–∏–∫–∞–Ω–æ –∏–ª–∏ —Ö–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç—á–µ—Ç–∞, 
//–∑–∞–ø–æ—á–≤–∞—â–∞ –æ—Ç –Ω–∞—á–∞–ª–Ω–æ—Ç–æ –∏ –∑–∞–≤—ä—Ä—à–≤–∞—â–∞ –≤ –∫—Ä–∞–π–Ω–æ—Ç–æ –∫–≤–∞–¥—Ä–∞—Ç—á–µ.–î–∞ —Å–µ –¥–µ—Ñ–∏–Ω–∏—Ä–∞ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—è—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–≤–∞, 
//–¥–∞–ª–∏ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –∞—Ü–∏–∫–ª–∏—á–µ–Ω –ø—ä—Ç –æ—Ç K1 –¥–æ K2 –≤ Gr, –∫–æ–π—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–≤–∞ –∞—Ä–∏—Ç–º–µ—Ç–∏—á–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å–∏—è —Å —Ä–∞–∑–ª–∏–∫–∞ d.

void inputMaze(int** maze, int n, int m)
{
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			std::cin >> maze[i][j];
		}
	}
}

bool isSafe(int** maze, int x, int y, int n, int m)
{
	return (x >= 0 && x < n && y >= 0 && y < m);
}

bool isAritmeticProgression(int* path, int size, int diff)
{
	for (int i = 0; i < size - 1; i++)
	{
		if (path[i] + diff != path[i + 1])
			return false;
	}
	return true;
}

void hasPath(int** maze, int n, int m, int k1x, int k1y, int k2x, int k2y, int diff, int* path, int pathInd, bool** sol)
{
	if (k1x == k2x && k1y == k2y)
	{
		path[pathInd++] = maze[k2x][k2y];
		if (isAritmeticProgression(path, pathInd, diff))
		{
			for (int i = 0; i < pathInd; i++)
			{
				std::cout << path[i] << ' ';
			}
		}
		return;
	}

	if (isSafe(maze, k1x, k1y, n, m))
	{
		if (sol[k1x][k1y] == 1)
			return;
		sol[k1x][k1y] = 1;
		path[pathInd++] = maze[k1x][k1y];
		
		k1x = k1x + 1;
		hasPath(maze, n, m, k1x, k1y, k2x, k2y, diff, path, pathInd, sol);
		k1x = k1x - 1;

		k1x = k1x - 1;
		hasPath(maze, n, m, k1x, k1y, k2x, k2y, diff, path, pathInd, sol);
		k1x = k1x + 1;

		k1y = k1y + 1;
		hasPath(maze, n, m, k1x, k1y, k2x, k2y, diff, path, pathInd, sol);
		k1y = k1y - 1;

		k1y = k1y - 1;
		hasPath(maze, n, m, k1x, k1y, k2x, k2y, diff, path, pathInd, sol);
		k1y = k1y + 1;

		sol[k1x][k1y] = 0;
		pathInd--;
	}
	return;
}

int main()
{
	int n, m;
	std::cout << "n, m: ";
	std::cin >> n >> m;

	std::cout << "Maze: " << std::endl;
	int** maze = new int* [n];
	for (int i = 0; i < n; i++)
	{
		maze[i] = new int[m];
	}
	inputMaze(maze, n, m);

	bool** sol = new bool* [n];
	for (int i = 0; i < n; i++)
	{
		sol[i] = new bool[m];
	}

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			sol[i][j] = 0;
		}
	}

	int* path = new int[n * m];

	int k1x, k1y, k2x, k2y;
	std::cout << "k1_x, k1_y: ";
	std::cin >> k1x >> k1y;
	std::cout << "k2_x, k2_y: ";
	std::cin >> k2x >> k2y;

	int sum = maze[k1x][k1y];
	int diff;
	std::cout << "Difference: ";
	std::cin >> diff;

	hasPath(maze, n, m, k1x, k1y, k2x, k2y, diff, path, 0, sol);

	for (int i = 0; i < n; i++)
	{
		delete[] maze[i];
		delete[] sol[i];
	}
	delete[] maze;
	delete[] sol;
	delete[] path;
}
